[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/atlas.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_subsurfaceior = float(1.399999976158142);
	float node1_in5_subsurfaceanisotropy = float(0.0);
	float node1_in6_metallic = float(0.0);
	float node1_in7_specular = float(0.5);
	float node1_in8_speculartint = float(0.0);
	float node1_in9_roughness = float(0.5);
	float node1_in10_anisotropic = float(0.0);
	float node1_in11_anisotropicrotation = float(0.0);
	float node1_in12_sheen = float(0.0);
	float node1_in13_sheentint = float(0.5);
	float node1_in14_clearcoat = float(0.0);
	float node1_in15_clearcoatroughness = float(0.029999999329447746);
	float node1_in16_ior = float(1.4500000476837158);
	float node1_in17_transmission = float(0.0);
	float node1_in18_transmissionroughness = float(0.0);
	vec4 node1_in19_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in20_emissionstrength = float(1.0);
	float node1_in21_alpha = float(1.0);
	vec3 node1_in22_normal = NORMAL;
	vec3 node1_in23_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in24_tangent = TANGENT;
	float node1_in25_weight = float(0.0);
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in6_metallic, node1_in7_specular,
		node1_in9_roughness, node1_in14_clearcoat, node1_in15_clearcoatroughness,
		node1_in10_anisotropic, node1_in17_transmission, node1_in16_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in22_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in24_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Plane005"
surfaces/0 = {
"aabb": AABB( 0, -5.96046e-08, -0.7, 2, 2, 1.40001 ),
"array_data": PoolByteArray( 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 47, 51, 56, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 56, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 0, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 85, 51, 0, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 208, 50, 56, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 170, 50, 0, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 0, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 208, 50, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 47, 51, 56, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 85, 51, 0, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 0, 127, 63, 170, 50, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 255, 53, 176, 170, 42, 63, 0, 0, 0, 0, 51, 51, 51, 63, 0, 0, 127, 63, 170, 50, 255, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 170, 50, 97, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 97, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 97, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 170, 50, 97, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 208, 50, 56, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 0, 50, 56, 53, 143, 170, 170, 63, 0, 0, 0, 0, 51, 51, 51, 63, 0, 0, 127, 63, 85, 51, 255, 53, 0, 0, 0, 64, 0, 0, 0, 0, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 255, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 97, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 85, 51, 97, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 85, 51, 97, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 97, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 255, 51, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 0, 127, 63, 47, 51, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 191, 127, 127, 127, 193, 47, 51, 56, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 191, 127, 127, 127, 193, 85, 51, 0, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 191, 127, 127, 127, 193, 255, 51, 0, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 191, 127, 127, 127, 193, 255, 51, 56, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 191, 126, 129, 127, 193, 0, 50, 56, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 191, 126, 129, 127, 193, 0, 50, 0, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 191, 126, 129, 127, 193, 170, 50, 0, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 191, 126, 129, 127, 193, 208, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 191, 126, 127, 127, 193, 208, 50, 56, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 191, 126, 127, 127, 193, 170, 50, 0, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 191, 126, 127, 127, 193, 85, 51, 0, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 191, 126, 127, 127, 193, 47, 51, 56, 53, 0, 0, 0, 0, 243, 255, 127, 179, 51, 51, 51, 191, 126, 129, 127, 193, 0, 50, 255, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 191, 126, 129, 127, 193, 0, 50, 97, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 191, 126, 129, 127, 193, 170, 50, 97, 53, 176, 170, 42, 63, 243, 255, 127, 179, 51, 51, 51, 191, 126, 129, 127, 193, 170, 50, 255, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 191, 126, 127, 127, 193, 0, 50, 97, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 191, 126, 127, 127, 193, 0, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 191, 126, 127, 127, 193, 208, 50, 56, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 191, 126, 127, 127, 193, 170, 50, 97, 53, 143, 170, 170, 63, 243, 255, 127, 179, 51, 51, 51, 191, 126, 129, 127, 193, 85, 51, 255, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 191, 126, 129, 127, 193, 85, 51, 97, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 191, 126, 129, 127, 193, 255, 51, 97, 53, 0, 0, 0, 64, 243, 255, 127, 179, 51, 51, 51, 191, 126, 129, 127, 193, 255, 51, 255, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 191, 127, 127, 127, 193, 85, 51, 97, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 191, 127, 127, 127, 193, 47, 51, 56, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 191, 127, 127, 127, 193, 255, 51, 56, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 191, 127, 127, 127, 193, 255, 51, 97, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 63, 129, 0, 127, 193, 85, 51, 97, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 191, 129, 0, 127, 193, 85, 51, 97, 53, 143, 170, 170, 63, 243, 255, 127, 179, 51, 51, 51, 191, 129, 0, 127, 193, 85, 51, 255, 53, 143, 170, 170, 63, 0, 0, 0, 0, 51, 51, 51, 63, 129, 0, 127, 193, 85, 51, 255, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 63, 127, 0, 127, 193, 255, 51, 97, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 191, 127, 0, 127, 193, 255, 51, 97, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 191, 127, 0, 127, 193, 255, 51, 56, 53, 0, 0, 0, 64, 145, 126, 199, 63, 51, 51, 51, 63, 127, 0, 127, 193, 255, 51, 56, 53, 143, 170, 170, 63, 0, 0, 0, 0, 51, 51, 51, 63, 0, 129, 127, 193, 85, 51, 255, 53, 143, 170, 170, 63, 243, 255, 127, 179, 51, 51, 51, 191, 0, 129, 127, 193, 85, 51, 255, 53, 0, 0, 0, 64, 243, 255, 127, 179, 51, 51, 51, 191, 0, 129, 127, 193, 255, 51, 255, 53, 0, 0, 0, 64, 0, 0, 0, 0, 51, 51, 51, 63, 0, 129, 127, 193, 255, 51, 255, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 63, 170, 216, 127, 193, 47, 51, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 191, 170, 216, 127, 193, 47, 51, 56, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 191, 170, 216, 127, 193, 85, 51, 97, 53, 143, 170, 170, 63, 56, 190, 158, 63, 51, 51, 51, 63, 170, 216, 127, 193, 85, 51, 97, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 63, 0, 127, 127, 63, 0, 53, 254, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 191, 0, 127, 127, 63, 0, 53, 0, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 191, 0, 127, 127, 63, 171, 52, 0, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 127, 127, 63, 171, 52, 254, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 191, 127, 0, 127, 193, 255, 51, 0, 53, 0, 0, 0, 64, 0, 0, 0, 64, 51, 51, 51, 63, 127, 0, 127, 193, 255, 51, 0, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 127, 127, 63, 171, 52, 254, 53, 143, 170, 170, 63, 0, 0, 0, 64, 51, 51, 51, 191, 0, 127, 127, 63, 171, 52, 0, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 191, 0, 127, 127, 63, 85, 52, 0, 53, 176, 170, 42, 63, 0, 0, 0, 64, 51, 51, 51, 63, 0, 127, 127, 63, 85, 52, 254, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 191, 0, 127, 127, 63, 0, 52, 0, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 63, 0, 127, 127, 63, 0, 52, 254, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 63, 129, 0, 127, 193, 0, 50, 0, 53, 0, 0, 0, 0, 0, 0, 0, 64, 51, 51, 51, 191, 129, 0, 127, 193, 0, 50, 0, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 191, 129, 0, 127, 193, 0, 50, 56, 53, 0, 0, 0, 0, 145, 126, 199, 63, 51, 51, 51, 63, 129, 0, 127, 193, 0, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 130, 127, 193, 208, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 191, 0, 130, 127, 193, 208, 50, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 191, 0, 130, 127, 193, 47, 51, 56, 53, 48, 187, 151, 63, 145, 126, 199, 63, 51, 51, 51, 63, 0, 130, 127, 193, 47, 51, 56, 53, 176, 170, 42, 63, 0, 0, 0, 0, 51, 51, 51, 63, 127, 0, 127, 193, 170, 50, 255, 53, 176, 170, 42, 63, 243, 255, 127, 179, 51, 51, 51, 191, 127, 0, 127, 193, 170, 50, 255, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 191, 127, 0, 127, 193, 170, 50, 97, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 63, 127, 0, 127, 193, 170, 50, 97, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 191, 129, 0, 127, 193, 0, 50, 97, 53, 0, 0, 0, 0, 56, 190, 158, 63, 51, 51, 51, 63, 129, 0, 127, 193, 0, 50, 97, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 63, 86, 216, 127, 193, 170, 50, 97, 53, 176, 170, 42, 63, 56, 190, 158, 63, 51, 51, 51, 191, 86, 216, 127, 193, 170, 50, 97, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 191, 86, 216, 127, 193, 208, 50, 56, 53, 210, 137, 80, 63, 145, 126, 199, 63, 51, 51, 51, 63, 86, 216, 127, 193, 208, 50, 56, 53, 0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 63, 0, 129, 127, 193, 0, 50, 255, 53, 0, 0, 0, 0, 243, 255, 127, 179, 51, 51, 51, 191, 0, 129, 127, 193, 0, 50, 255, 53, 176, 170, 42, 63, 243, 255, 127, 179, 51, 51, 51, 191, 0, 129, 127, 193, 170, 50, 255, 53, 176, 170, 42, 63, 0, 0, 0, 0, 51, 51, 51, 63, 0, 129, 127, 193, 170, 50, 255, 53, 0, 0, 0, 64, 0, 0, 0, 0, 51, 51, 51, 63, 126, 0, 127, 193, 255, 51, 255, 53, 0, 0, 0, 64, 243, 255, 127, 179, 51, 51, 51, 191, 126, 0, 127, 193, 255, 51, 255, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 191, 126, 0, 127, 193, 255, 51, 97, 53, 0, 0, 0, 64, 56, 190, 158, 63, 51, 51, 51, 63, 126, 0, 127, 193, 255, 51, 97, 53, 0, 0, 0, 0, 243, 255, 127, 179, 51, 51, 51, 191, 129, 0, 127, 193, 0, 50, 255, 53, 0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 63, 129, 0, 127, 193, 0, 50, 255, 53 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 24, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 28, 0, 31, 0, 30, 0, 32, 0, 34, 0, 33, 0, 32, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 36, 0, 39, 0, 38, 0, 40, 0, 42, 0, 41, 0, 40, 0, 43, 0, 42, 0, 44, 0, 46, 0, 45, 0, 44, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 48, 0, 51, 0, 50, 0, 52, 0, 54, 0, 53, 0, 52, 0, 55, 0, 54, 0, 56, 0, 58, 0, 57, 0, 56, 0, 59, 0, 58, 0, 60, 0, 62, 0, 61, 0, 60, 0, 63, 0, 62, 0, 64, 0, 66, 0, 65, 0, 64, 0, 67, 0, 66, 0, 68, 0, 70, 0, 69, 0, 68, 0, 71, 0, 70, 0, 72, 0, 74, 0, 73, 0, 72, 0, 75, 0, 74, 0, 63, 0, 76, 0, 62, 0, 63, 0, 77, 0, 76, 0, 78, 0, 80, 0, 79, 0, 78, 0, 81, 0, 80, 0, 81, 0, 82, 0, 80, 0, 81, 0, 83, 0, 82, 0, 84, 0, 86, 0, 85, 0, 84, 0, 87, 0, 86, 0, 88, 0, 90, 0, 89, 0, 88, 0, 91, 0, 90, 0, 92, 0, 94, 0, 93, 0, 92, 0, 95, 0, 94, 0, 87, 0, 96, 0, 86, 0, 87, 0, 97, 0, 96, 0, 98, 0, 100, 0, 99, 0, 98, 0, 101, 0, 100, 0, 102, 0, 104, 0, 103, 0, 102, 0, 105, 0, 104, 0, 106, 0, 108, 0, 107, 0, 106, 0, 109, 0, 108, 0, 97, 0, 110, 0, 96, 0, 97, 0, 111, 0, 110, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 180,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 112
}

[sub_resource type="BoxShape" id=4]
extents = Vector3( 1, 0.222477, 0.692097 )

[sub_resource type="BoxShape" id=5]
extents = Vector3( 0.336373, 0.68158, 0.694477 )

[node name="BridgeCont" type="StaticBody"]
transform = Transform( 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 3 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1.76912, 0 )
shape = SubResource( 4 )

[node name="CollisionShape2" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.335107, 0.697031, 0 )
shape = SubResource( 5 )

[node name="CollisionShape3" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.67019, 0.697031, 0 )
shape = SubResource( 5 )
