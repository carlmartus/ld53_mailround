[gd_scene load_steps=13 format=2]

[ext_resource path="res://scenes/collect.gd" type="Script" id=1]
[ext_resource path="res://assets/atlas.png" type="Texture" id=2]

[sub_resource type="CylinderShape" id=4]
height = 1.77283

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_subsurfaceior = float(1.399999976158142);
	float node1_in5_subsurfaceanisotropy = float(0.0);
	float node1_in6_metallic = float(0.0);
	float node1_in7_specular = float(0.5);
	float node1_in8_speculartint = float(0.0);
	float node1_in9_roughness = float(0.5);
	float node1_in10_anisotropic = float(0.0);
	float node1_in11_anisotropicrotation = float(0.0);
	float node1_in12_sheen = float(0.0);
	float node1_in13_sheentint = float(0.5);
	float node1_in14_clearcoat = float(0.0);
	float node1_in15_clearcoatroughness = float(0.029999999329447746);
	float node1_in16_ior = float(1.4500000476837158);
	float node1_in17_transmission = float(0.0);
	float node1_in18_transmissionroughness = float(0.0);
	vec4 node1_in19_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in20_emissionstrength = float(1.0);
	float node1_in21_alpha = float(1.0);
	vec3 node1_in22_normal = NORMAL;
	vec3 node1_in23_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in24_tangent = TANGENT;
	float node1_in25_weight = float(0.0);
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in6_metallic, node1_in7_specular,
		node1_in9_roughness, node1_in14_clearcoat, node1_in15_clearcoatroughness,
		node1_in10_anisotropic, node1_in17_transmission, node1_in16_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in22_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in24_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 2 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Cylinder"
surfaces/0 = {
"aabb": AABB( -0.974928, -0.031962, -1, 1.94986, 0.431962, 1.90097 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 127, 85, 129, 84, 255, 53, 54, 43, 0, 0, 0, 0, 205, 204, 204, 62, 0, 0, 128, 191, 127, 85, 129, 84, 255, 53, 35, 40, 20, 38, 72, 63, 205, 204, 204, 62, 10, 157, 31, 191, 127, 85, 129, 84, 219, 53, 35, 40, 20, 38, 72, 63, 0, 0, 0, 0, 10, 157, 31, 191, 127, 85, 129, 84, 219, 53, 54, 43, 20, 38, 72, 63, 0, 0, 0, 0, 10, 157, 31, 191, 127, 23, 129, 115, 219, 53, 54, 43, 20, 38, 72, 63, 205, 204, 204, 62, 10, 157, 31, 191, 127, 23, 129, 115, 219, 53, 35, 40, 226, 148, 121, 63, 205, 204, 204, 62, 140, 220, 99, 62, 127, 23, 129, 115, 182, 53, 35, 40, 226, 148, 121, 63, 0, 0, 0, 0, 140, 220, 99, 62, 127, 23, 129, 115, 182, 53, 54, 43, 226, 148, 121, 63, 0, 0, 0, 0, 140, 220, 99, 62, 70, 0, 127, 98, 182, 53, 54, 43, 226, 148, 121, 63, 205, 204, 204, 62, 140, 220, 99, 62, 70, 0, 127, 98, 182, 53, 35, 40, 11, 38, 222, 62, 205, 204, 204, 62, 232, 165, 102, 63, 70, 0, 127, 98, 146, 53, 35, 40, 11, 38, 222, 62, 0, 0, 0, 0, 232, 165, 102, 63, 70, 0, 127, 98, 146, 53, 54, 43, 11, 38, 222, 62, 0, 0, 0, 0, 232, 165, 102, 63, 0, 0, 127, 63, 146, 53, 54, 43, 11, 38, 222, 62, 205, 204, 204, 62, 232, 165, 102, 63, 0, 0, 127, 63, 146, 53, 35, 40, 11, 38, 222, 190, 205, 204, 204, 62, 232, 165, 102, 63, 0, 0, 127, 63, 109, 53, 35, 40, 11, 38, 222, 190, 0, 0, 0, 0, 232, 165, 102, 63, 0, 0, 127, 63, 109, 53, 54, 43, 11, 38, 222, 190, 0, 0, 0, 0, 232, 165, 102, 63, 186, 0, 56, 63, 109, 53, 54, 43, 11, 38, 222, 190, 205, 204, 204, 62, 232, 165, 102, 63, 186, 0, 56, 63, 109, 53, 35, 40, 226, 148, 121, 191, 205, 204, 204, 62, 140, 220, 99, 62, 186, 0, 56, 63, 73, 53, 35, 40, 226, 148, 121, 191, 0, 0, 0, 0, 140, 220, 99, 62, 186, 0, 56, 63, 73, 53, 54, 43, 226, 148, 121, 191, 0, 0, 0, 0, 140, 220, 99, 62, 129, 23, 233, 63, 73, 53, 54, 43, 226, 148, 121, 191, 205, 204, 204, 62, 140, 220, 99, 62, 129, 23, 233, 63, 73, 53, 35, 40, 20, 38, 72, 191, 205, 204, 204, 62, 10, 157, 31, 191, 129, 23, 233, 63, 36, 53, 35, 40, 20, 38, 72, 191, 0, 0, 0, 0, 10, 157, 31, 191, 129, 23, 233, 63, 36, 53, 54, 43, 20, 38, 72, 191, 0, 0, 0, 0, 10, 157, 31, 191, 129, 85, 171, 63, 36, 53, 54, 43, 20, 38, 72, 191, 205, 204, 204, 62, 10, 157, 31, 191, 129, 85, 171, 63, 36, 53, 35, 40, 0, 0, 0, 0, 205, 204, 204, 62, 0, 0, 128, 191, 129, 85, 171, 63, 0, 53, 35, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 129, 85, 171, 63, 0, 53, 54, 43, 0, 0, 0, 0, 150, 234, 2, 189, 0, 0, 128, 191, 215, 0, 129, 172, 255, 53, 54, 43, 20, 38, 72, 63, 150, 234, 2, 189, 10, 157, 31, 191, 215, 0, 129, 172, 219, 53, 54, 43, 20, 38, 72, 63, 122, 111, 188, 62, 10, 157, 31, 191, 215, 0, 129, 172, 219, 53, 35, 40, 0, 0, 0, 0, 122, 111, 188, 62, 0, 0, 128, 191, 215, 0, 129, 172, 255, 53, 35, 40, 20, 38, 72, 63, 150, 234, 2, 189, 10, 157, 31, 191, 153, 0, 129, 141, 219, 53, 54, 43, 226, 148, 121, 63, 150, 234, 2, 189, 140, 220, 99, 62, 153, 0, 129, 141, 182, 53, 54, 43, 226, 148, 121, 63, 122, 111, 188, 62, 140, 220, 99, 62, 153, 0, 129, 141, 182, 53, 35, 40, 20, 38, 72, 63, 122, 111, 188, 62, 10, 157, 31, 191, 153, 0, 129, 141, 219, 53, 35, 40, 226, 148, 121, 63, 150, 234, 2, 189, 140, 220, 99, 62, 129, 56, 127, 158, 182, 53, 54, 43, 11, 38, 222, 62, 150, 234, 2, 189, 232, 165, 102, 63, 129, 56, 127, 158, 146, 53, 54, 43, 11, 38, 222, 62, 122, 111, 188, 62, 232, 165, 102, 63, 129, 56, 127, 158, 146, 53, 35, 40, 226, 148, 121, 63, 122, 111, 188, 62, 140, 220, 99, 62, 129, 56, 127, 158, 182, 53, 35, 40, 11, 38, 222, 62, 150, 234, 2, 189, 232, 165, 102, 63, 127, 127, 127, 193, 146, 53, 54, 43, 11, 38, 222, 190, 150, 234, 2, 189, 232, 165, 102, 63, 127, 127, 127, 193, 109, 53, 54, 43, 11, 38, 222, 190, 122, 111, 188, 62, 232, 165, 102, 63, 127, 127, 127, 193, 109, 53, 35, 40, 11, 38, 222, 62, 122, 111, 188, 62, 232, 165, 102, 63, 127, 127, 127, 193, 146, 53, 35, 40, 11, 38, 222, 190, 150, 234, 2, 189, 232, 165, 102, 63, 127, 56, 56, 193, 109, 53, 54, 43, 226, 148, 121, 191, 150, 234, 2, 189, 140, 220, 99, 62, 127, 56, 56, 193, 73, 53, 54, 43, 226, 148, 121, 191, 122, 111, 188, 62, 140, 220, 99, 62, 127, 56, 56, 193, 73, 53, 35, 40, 11, 38, 222, 190, 122, 111, 188, 62, 232, 165, 102, 63, 127, 56, 56, 193, 109, 53, 35, 40, 226, 148, 121, 191, 150, 234, 2, 189, 140, 220, 99, 62, 103, 0, 233, 193, 73, 53, 54, 43, 20, 38, 72, 191, 150, 234, 2, 189, 10, 157, 31, 191, 103, 0, 233, 193, 36, 53, 54, 43, 20, 38, 72, 191, 122, 111, 188, 62, 10, 157, 31, 191, 103, 0, 233, 193, 36, 53, 35, 40, 226, 148, 121, 191, 122, 111, 188, 62, 140, 220, 99, 62, 103, 0, 233, 193, 73, 53, 35, 40, 20, 38, 72, 191, 150, 234, 2, 189, 10, 157, 31, 191, 41, 0, 171, 193, 36, 53, 54, 43, 0, 0, 0, 0, 150, 234, 2, 189, 0, 0, 128, 191, 41, 0, 171, 193, 0, 53, 54, 43, 0, 0, 0, 0, 122, 111, 188, 62, 0, 0, 128, 191, 41, 0, 171, 193, 0, 53, 35, 40, 20, 38, 72, 191, 122, 111, 188, 62, 10, 157, 31, 191, 41, 0, 171, 193, 36, 53, 35, 40 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 24, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 28, 0, 31, 0, 30, 0, 32, 0, 34, 0, 33, 0, 32, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 36, 0, 39, 0, 38, 0, 40, 0, 42, 0, 41, 0, 40, 0, 43, 0, 42, 0, 44, 0, 46, 0, 45, 0, 44, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 48, 0, 51, 0, 50, 0, 52, 0, 54, 0, 53, 0, 52, 0, 55, 0, 54, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 84,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 56
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 360, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath(".:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath(".:translation:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath(".:translation:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( -0.281, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath(".:translation:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[sub_resource type="Animation" id=6]
resource_name = "rotate"
length = 2.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.3, 1.63333, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.305025, 58.0333, 360, -0.279657, -53.5667, 0.25, 0 ),
"times": PoolRealArray( 0, 2 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath(".:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 2 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath(".:translation:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath(".:translation:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( -0.73007, -0.25, 0, 0.25, 0, -0.281, -0.25, 0, 0.25, 0, -0.73, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath(".:translation:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}

[sub_resource type="CubeMesh" id=7]
size = Vector3( 1, 1, 1 )

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath("../Pedistal:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("../Pedistal:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 360, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("../Pedistal:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( -13.158, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[sub_resource type="Animation" id=9]
resource_name = "spin"
length = 3.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath("../Pedistal:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("../Pedistal:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.3, 40.1161, 360, -0.3, -38.7037, 0.25, 0 ),
"times": PoolRealArray( 0, 3 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("../Pedistal:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( -13.158, -0.25, 0, 0.25, 0, -13.158, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3 )
}

[sub_resource type="CylinderMesh" id=10]
top_radius = 0.0
bottom_radius = 0.5
radial_segments = 4
rings = 0

[node name="CollectLetter" type="Spatial"]
script = ExtResource( 1 )

[node name="Area" type="Area" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="Area"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.620239, 0 )
shape = SubResource( 4 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 1.74846e-07, 0, 1, 0, -1.74846e-07, 0, 1, 0, -0.281, 0 )
mesh = SubResource( 3 )

[node name="SpinRing" type="AnimationPlayer" parent="."]
root_node = NodePath("../MeshInstance")
anims/RESET = SubResource( 5 )
anims/rotate = SubResource( 6 )

[node name="Pedistal" type="MeshInstance" parent="."]
transform = Transform( 0.973746, 0.227637, 1.74846e-07, -0.227637, 0.973746, 0, -1.70255e-07, -3.98013e-08, 1, 0, 1.64825, 0 )
mesh = SubResource( 7 )

[node name="SpinMesh" type="AnimationPlayer" parent="."]
root_node = NodePath(".")
anims/RESET = SubResource( 8 )
anims/spin = SubResource( 9 )

[node name="Checkpoint" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0682706, 1 )

[node name="Direction" type="MeshInstance" parent="."]
transform = Transform( -1, 8.74228e-08, 3.82137e-15, 0, -4.37114e-08, 1, 8.74228e-08, 1, 4.37114e-08, 0, 2, -0.577249 )
mesh = SubResource( 10 )

[connection signal="body_entered" from="Area" to="." method="_on_Area_body_entered"]
